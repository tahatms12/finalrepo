{% schema %}
{
  "name": "YMM Search",
  "settings": [],
  "presets": [
    {
      "name": "YMM Search"
    }
  ]
}
{% endschema %}

<div id="ymm-search-tool">
  <div class="ymm-dropdown">
    <label for="ymm-year">Year:</label>
    <select id="ymm-year" name="year">
      <option value="">Select Year</option>
    </select>
  </div>
  <div class="ymm-dropdown">
    <label for="ymm-make">Make:</label>
    <select id="ymm-make" name="make" disabled>
      <option value="">Select Make</option>
    </select>
  </div>
  <div class="ymm-dropdown">
    <label for="ymm-model">Model:</label>
    <select id="ymm-model" name="model" disabled>
      <option value="">Select Model</option>
    </select>
  </div>
  <div class="ymm-dropdown">
    <label for="ymm-category">Category:</label>
    <select id="ymm-category" name="category">
      <option value="">Select Category</option>
    </select>
  </div>
  <div class="ymm-dropdown">
    <label for="ymm-subcategory">Subcategory:</label>
    <select id="ymm-subcategory" name="subcategory" disabled>
      <option value="">Select Subcategory</option>
    </select>
  </div>
</div>

<style>
  /* Basic styling for the YMM search tool */
  #ymm-search-tool {
    display: flex;
    gap: 15px;
    padding: 20px;
    background-color: #f8f8f8;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    align-items: flex-end;
    flex-wrap: wrap;
  }

  .ymm-dropdown {
    display: flex;
    flex-direction: column;
    min-width: 150px;
  }

  .ymm-dropdown label {
    margin-bottom: 5px;
    font-weight: bold;
    color: #333;
  }

  .ymm-dropdown select {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fff;
    font-size: 16px;
    cursor: pointer;
    -webkit-appearance: none; /* Remove default browser styling */
    -moz-appearance: none;
    appearance: none;
    background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%20viewBox%3D%220%200%20292.4%20292.4%22%3E%3Cpath%20fill%3D%22%23333%22%20d%3D%22M287%20197.2L159.7%2069.8c-3-3-7.9-3-10.9%200L5.4%20197.2c-3%203-3%207.9%200%2010.9l10.9%2010.9c3%203%207.9%203%2010.9%200l122.6-122.6c3-3%207.9-3%2010.9%200l122.6%20122.6c3%203%207.9%203%2010.9%200l10.9-10.9c3-3%203-7.8%200-10.8z%22%2F%3E%3C%2Fsvg%3E');
    background-repeat: no-repeat;
    background-position: right 10px top 50%;
    background-size: 12px;
  }

  .ymm-dropdown select:focus {
    border-color: #007bff;
    outline: none;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const yearSelect = document.getElementById('ymm-year');
    const makeSelect = document.getElementById('ymm-make');
    const modelSelect = document.getElementById('ymm-model');
    const categorySelect = document.getElementById('ymm-category');
    const subcategorySelect = document.getElementById('ymm-subcategory');

    const fitmentData = {{ shop.metaobjects.ymm_fitment | json }};
    const categoryData = {{ shop.metaobjects.ymm_category | json }};

    // Populate years
    fitmentData.years.forEach(year => {
      const option = document.createElement('option');
      option.value = year;
      option.textContent = year;
      yearSelect.appendChild(option);
    });

    // Populate categories
    categoryData.categories.forEach(category => {
      const option = document.createElement('option');
      option.value = category;
      option.textContent = category;
      categorySelect.appendChild(option);
    });

    function updateMakes() {
      const selectedYear = yearSelect.value;
      makeSelect.innerHTML = '<option value="">Select Make</option>';
      modelSelect.innerHTML = '<option value="">Select Model</option>';
      makeSelect.disabled = true;
      modelSelect.disabled = true;

      if (selectedYear) {
        const makes = fitmentData.makes[selectedYear];
        makes.forEach(make => {
          const option = document.createElement('option');
          option.value = make;
          option.textContent = make;
          makeSelect.appendChild(option);
        });
        makeSelect.disabled = false;
      }
      filterProducts();
    }

    function updateModels() {
      const selectedYear = yearSelect.value;
      const selectedMake = makeSelect.value;
      modelSelect.innerHTML = '<option value="">Select Model</option>';
      modelSelect.disabled = true;

      if (selectedYear && selectedMake) {
        const models = fitmentData.models[selectedYear][selectedMake];
        models.forEach(model => {
          const option = document.createElement('option');
          option.value = model;
          option.textContent = model;
          modelSelect.appendChild(option);
        });
        modelSelect.disabled = false;
      }
      filterProducts();
    }

    function updateSubcategories() {
      const selectedCategory = categorySelect.value;
      subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';
      subcategorySelect.disabled = true;

      if (selectedCategory) {
        const subcategories = categoryData.subcategories[selectedCategory];
        subcategories.forEach(sub => {
          const option = document.createElement('option');
          option.value = sub;
          option.textContent = sub;
          subcategorySelect.appendChild(option);
        });
        subcategorySelect.disabled = false;
      }
      filterProducts();
    }

    yearSelect.addEventListener('change', updateMakes);
    makeSelect.addEventListener('change', updateModels);
    modelSelect.addEventListener('change', filterProducts);
    categorySelect.addEventListener('change', updateSubcategories);
    subcategorySelect.addEventListener('change', filterProducts);

    function filterProducts() {
      const selectedYear = yearSelect.value;
      const selectedMake = makeSelect.value;
      const selectedModel = modelSelect.value;
      const selectedCategory = categorySelect.value;
      const selectedSubcategory = subcategorySelect.value;

      const productElements = document.querySelectorAll('.product-item'); // Assuming products have this class

      productElements.forEach(product => {
        const productYear = product.dataset.year;
        const productMake = product.dataset.make;
        const productModel = product.dataset.model;
        const productCategory = product.dataset.category;
        const productSubcategory = product.dataset.subcategory;

        let showProduct = true;

        if (selectedYear && productYear !== selectedYear) {
          showProduct = false;
        }
        if (selectedMake && productMake !== selectedMake) {
          showProduct = false;
        }
        if (selectedModel && productModel !== selectedModel) {
          showProduct = false;
        }
        if (selectedCategory && productCategory !== selectedCategory) {
          showProduct = false;
        }
        if (selectedSubcategory && productSubcategory !== selectedSubcategory) {
          showProduct = false;
        }

        if (showProduct) {
          product.style.display = ''; // Show product
        } else {
          product.style.display = 'none'; // Hide product
        }
      });
    }
  });
</script>